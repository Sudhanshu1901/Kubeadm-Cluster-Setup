🛠️ How to Set Up a Kubernetes Cluster using kubeadm on Ubuntu 24.04 (LTS)
This guide covers setting up a Kubernetes cluster with kubeadm, with one master node and worker nodes, on Ubuntu 24.04 (LTS).

💻 Prerequisites
Master Node: 2 vCPUs, 4 GB RAM
Worker Nodes: 1 vCPU, 1 GB RAM
🌐 Open Ports
Ensure the necessary ports are open on both master and worker nodes. For a comprehensive list of ports, refer to the Kubernetes documentation on ports and protocols.

⚙️ Master Node Setup
  1. Disable Swap
  Swap needs to be disabled because it can interfere with kubelet’s resource management, leading to issues in pod deployment.

  sudo swapoff -a
  sudo sed -i '/ swap / s/^\(.*\)$/#\1/g' /etc/fstab
  2. Enable Kernel Modules and Configure sysctl
  Enable the overlay and br_netfilter kernel modules to allow IPv4 forwarding and for iptables to see bridged traffic. This is essential for proper networking in Kubernetes.

  # Load kernel modules
  cat <<EOF | sudo tee /etc/modules-load.d/k8s.conf
  overlay
  br_netfilter
  EOF

  sudo modprobe overlay
  sudo modprobe br_netfilter

  # Configure sysctl parameters
  cat <<EOF | sudo tee /etc/sysctl.d/k8s.conf
  net.bridge.bridge-nf-call-iptables = 1
  net.bridge.bridge-nf-call-ip6tables = 1
  net.ipv4.ip_forward = 1
  EOF

  # Apply the sysctl settings
  sudo sysctl --system
  Verify that the modules are loaded and sysctl settings are correctly applied:
  lsmod | grep br_netfilter
  lsmod | grep overlay
  sysctl net.bridge.bridge-nf-call-iptables net.bridge.bridge-nf-call-ip6tables net.ipv4.ip_forward

3. Install Container Runtime (containerd)
Install containerd, the container runtime interface (CRI) for Kubernetes:
  # Install dependencies and add Docker's GPG key
  sudo apt-get update
  sudo apt-get install -y ca-certificates curl
  sudo install -m 0755 -d /etc/apt/keyrings
  sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
  sudo chmod a+r /etc/apt/keyrings/docker.asc
  # Add Docker's repository
  echo \ "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \$(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
  # Install containerd
  sudo apt-get update
  sudo apt-get install -y containerd.io

4. Configure containerd
Generate the containerd config file and make necessary changes:
  containerd config default | sed 's/SystemdCgroup = false/SystemdCgroup = true/' | sed 's/sandbox_image = "registry.k8s.io\/pause:3.6"/sandbox_image = "registry.k8s.io\/pause:3.9"/' | sudo tee /etc/containerd/config.toml
  sudo systemctl restart containerd

5. Install Kubernetes Components kubeadm, kubelet, and kubectl:
  # Add Kubernetes' apt repository
  sudo apt-get update
  sudo apt-get install -y apt-transport-https ca-certificates curl gpg
  curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.29/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
  echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.29/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list
  # Install the packages
  sudo apt-get update
  sudo apt-get install -y kubelet=1.29.6-1.1 kubeadm=1.29.6-1.1 kubectl=1.29.6-1.1 --allow-downgrades --allow-change-held-packages
  sudo apt-mark hold kubelet kubeadm kubectl
  # Verify installation
  kubeadm version
  kubelet --version
  kubectl version --client

6. Initialize Kubernetes with kubeadm. Use kubeadm init with the --pod-network-cidr and --apiserver-advertise-address flags. These specify the Pod network CIDR range for the CNI and the IP address to be used by other nodes for the Kubernetes API.
  sudo kubeadm init --pod-network-cidr=192.168.0.0/16 --apiserver-advertise-address=<Your-Master-IP> --node-name master
  🔑 Note: Copy the kubeadm join command output after running kubeadm init. You will need it to join worker nodes later.

7. Set up the kubeconfig file to use kubectl commands:
  mkdir -p $HOME/.kube
  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
  sudo chown $(id -u):$(id -g) $HOME/.kube/config

8. Install Calico as the CNI plugin to manage the Pod network:
  kubectl create -f https://raw.githubusercontent.com/projectcalico/calico/v3.28.0/manifests/tigera-operator.yaml
  curl https://raw.githubusercontent.com/projectcalico/calico/v3.28.0/manifests/custom-resources.yaml -O
  kubectl apply -f custom-resources.yaml


⚙️ Worker Node Setup

1. Repeat Steps 1-5 from the master node setup.

2. Join the Worker Node using the kubeadm join command from the master node setup:
  sudo kubeadm join <Master-IP>:6443 --token <token> --discovery-token-ca-cert-hash sha256:<hash>
  🔑 If you forgot the join command, you can regenerate it with:
      kubeadm token create --print-join-command
🛠️ Troubleshooting:
If you encounter errors like unable to connect to localhost:8080 when running kubectl get nodes, it’s likely due to the kubeconfig file pointing to the wrong API server address. Copy the kubeconfig file from the master node to the worker node:
scp master:/etc/kubernetes/admin.conf ~/.kube/config

By following these steps, you’ll have a fully functional Kubernetes cluster using kubeadm. If you face any issues, double-check configurations like IP addresses and network settings to ensure smooth communication between nodes.
